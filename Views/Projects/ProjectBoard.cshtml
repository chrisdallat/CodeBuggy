@using CodeBuggy.Controllers
@using CodeBuggy.Data
@using CodeBuggy.Helpers
@using CodeBuggy.Models.Projects
@using System.Text.Json
@using System.Web.Helpers
@using Microsoft.AspNetCore.Html


@{

    // Define a C# function to conditionally render the projectId input
    Func<string, IHtmlContent> RenderProjectIdInput = (projectId) =>
    {
        if (!string.IsNullOrEmpty(projectId))
        {
            return Html.Raw($"<input type='hidden' name='projectId' value='{projectId}' />");
        }
        return Html.Raw(string.Empty);
    };
}

<script type="text/javascript" src="~/js/projectBoard.js"></script>

@model ProjectsModel

@if (ViewBag.DeniedAccess == false)
{
    <div style="display: flex; justify-content: space-between; align-items: center;">
    <a class="create-button" style="text-align: left;" asp-controller="Burndown" asp-action="Index"
        asp-route-projectId="@ViewBag.ProjectId">
        <span style="margin-right: 5px">Burndown</span>
    </a>

    <h2 style="text-align: center; flex: 1;">@ViewBag.ProjectTitle Tickets board</h2>

    <a class="create-button" style="text-align: right;" onclick="togglePopup()">
        <span class="gg-math-plus"></span>
        <span style="margin-left: 5px">New Ticket</span>
    </a>
</div>

    <div class="board">
    <div class="column" id="todoColumn" ondrop="drop(event)" ondragover="allowDrop(event)">
        <h3 class="column-title">To Do</h3>
        <div class="tickets-container">
            @Html.RenderTickets(Model.Tickets, TicketStatus.ToDo)
        </div>
    </div>
    <div class="column" id="inProgressColumn" ondrop="drop(event)" ondragover="allowDrop(event)">
        <h3 class="column-title">In Progress</h3>
        <div class="tickets-container">
            @Html.RenderTickets(Model.Tickets, TicketStatus.InProgress)
        </div>
    </div>
    <div class="column" id="reviewColumn" ondrop="drop(event)" ondragover="allowDrop(event)">
        <h3 class="column-title">Review</h3>
        <div class="tickets-container">
            @Html.RenderTickets(Model.Tickets, TicketStatus.Review)
        </div>
    </div>
    <div class="column" id="doneColumn" ondrop="drop(event)" ondragover="allowDrop(event)">
        <h3 class="column-title">Done</h3>
        <div class="tickets-container">
            @Html.RenderTickets(Model.Tickets, TicketStatus.Done)
        </div>
    </div>
</div>



}
else
{
    <div>Access Denied: This page does not exist</div>
}

@****************************************************************@
@************************* Dynamic Code *************************@
@****************************************************************@
@{
    string addTicketForm = $@"
<form id='addTicketForm' action='AddTicket' method='post'>";

    string editTicketForm = $@"
<form id='editTicketForm' action='editTicket' method='post'>";

    string ticketTitleInput = @"
<div id='ticketTitleInput' class='form-floating mb-3' style='max-width: 380px'>
<input name='Input.TicketTitle' class='form-control' autocomplete='TicketTitle' aria-required='true' placeholder=''/>
<label name='Input.TicketTitle'>Title</label>
</div>";

    string ticketPriorityDropdown = @"
<div id='ticketPriority' class='form-floating mb-3 position-relative' style='max-width: 380px'>
<select id='ticketPriorityDropdown' name='Input.TicketPriorityValue' class='form-control'></select>
<label name='Input.TicketPriorityValue'>Priority</label>
<div class='dropdown-arrow'>▼</div>
</div>";

    string ticketStatusDropdown = @"
<div id='ticketStatus' class='form-floating mb-3 position-relative' style='max-width: 380px'>
<select id='ticketStatusDropdown' name='Input.TicketStatusValue' class='form-control'></select>
<label name='Input.TicketStatusValue'>Status</label>
<div class='dropdown-arrow'>▼</div>
</div>";

    string ticketDescriptionInput = @"
<div id='ticketDescriptionInput' class='form-floating mb-3' style='max-width: 380px'>
<textarea id='codeEditor' name='Input.TicketDescription' class='form-control'
autocomplete='TicketDescription' aria-required='true'
placeholder='' style='resize: none; max-width: 100%; height: 150px; overflow-y: auto;'
maxlength='5000'></textarea>
<label name='Input.TicketDescription'>Description</label>
</div>";

    string renderProjectId = $@" {RenderProjectIdInput(Context.Request.Query["projectId"])} ";

    string submitButton = @"
<button id='submitButton' type='submit' class='button-general mb-3 mt-5'
style='text-align: center; max-width: 160px'>
Create Ticket
</button>";

    addTicketForm += ticketTitleInput + ticketPriorityDropdown + ticketStatusDropdown + ticketDescriptionInput +
    renderProjectId + submitButton + "</form>";
    var addTicketPopup = new Popup();
    var addTicketPopupHTML = addTicketPopup.CreatePopup("addTicketPopup", "Add Ticket", new string[] { addTicketForm });
    @Html.Raw(addTicketPopupHTML)
    ;
}

<script>

    let populatePrioritiesDropdown = function () {
        let priorities = @Html.Raw(JsonSerializer.Serialize(Enum.GetValues(typeof(TicketPriority)).Cast<TicketPriority>().Select(e => new SelectListItem { Text = e.ToString(), Value = e.ToString() })));
        let dropdown = document.getElementById('ticketPriorityDropdown');

        priorities.forEach(function (priority) {
            let option = document.createElement('option');
            option.text = priority.Text;
            option.value = priority.Value;
            dropdown.appendChild(option);
        });
    }

    let populateStatusDropdown = function () {
        let status = @Html.Raw(JsonSerializer.Serialize(Enum.GetValues(typeof(TicketStatus)).Cast<TicketStatus>().Select(e => new SelectListItem { Text = e.ToString(), Value = e.ToString() })));
        let dropdown = document.getElementById('ticketStatusDropdown');

        status.forEach(function (status) {
            let option = document.createElement('option');
            option.text = status.Text;
            option.value = status.Value;
            dropdown.appendChild(option);
        });
    }
</script>
